// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Roles de usuario
enum Role {
  Administrator
  Project_Manager
  Colaborator
}

/// Prioridad de la tarea
enum Task_Priority {
  low
  medium
  high
}

/// Estado de la tarea
enum Task_Status {
  Pending
  In_process  // In process
  Review
  Finished
}

/// Colores disponibles
enum Color {
  Yellow
  Blue
  Red
  Purple
  Orange
  Gray
  Green
  Pink
}

/// Usuarios de la aplicación
model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  role         Role      @default(Colaborator)  
  profile      Profile?  

  // Relaciones con proyectos
  assignedProjects   Project[] @relation("assignedProjects")

  // Relaciones con tareas
  assignedTasks   Task[] @relation("assignedTasks")

  // Relaciones con tags y categorías
  assignedTags        Tag[]      @relation("assignedTags")
  assignedCategories  Category[] @relation("assignedCategories")

  createdAt    DateTime  @default(now())
}

/// Proyectos
model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  assignedTo   User?    @relation("assignedProjects", fields: [assignedToId], references: [id])
  assignedToId String?

  tasks        Task[]

  // Sólo createdAt
  createdAt   DateTime  @default(now())
}

/// Tareas
model Task {
  id          String        @id @default(uuid())
  title       String
  description String?

  priority    Task_Priority @default(low)
  status      Task_Status   @default(Pending)

  assignedTo   User?    @relation("assignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?

  project      Project? @relation(fields: [projectId], references: [id])
  projectId    String?

  dueDate     DateTime?

  tags        Tag[]      @relation("taskTags")
  categories  Category[] @relation("taskCategories")
  createdAt   DateTime   @default(now())
}

/// Etiquetas (tags)
model Tag {
  id          String    @id @default(uuid())
  name        String
  color       Color     @default(Gray)

  assignedTo   User     @relation("assignedTags", fields: [assignedToId], references: [id])
  assignedToId String

  tasks        Task[]   @relation("taskTags")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Categorías
model Category {
  id          String    @id @default(uuid())
  name        String
  tagColor    Color     @default(Gray)

  assignedTo   User     @relation("assignedCategories", fields: [assignedToId], references: [id])
  assignedToId String

  tasks        Task[]   @relation("taskCategories")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// (Opcional) Perfil de usuario
model Profile {
  id        String   @id @default(uuid())
  bio       String?
  avatarUrl String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
